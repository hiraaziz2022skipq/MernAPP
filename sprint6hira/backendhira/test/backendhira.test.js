"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const Backendhira = require("../lib/backendhira-stack");
const request = require('supertest');
const app = require('../server/server.js');
// Test case for checking Lambda function
test('AWS Lambda', () => {
    const app = new cdk.App();
    // WHEN
    const stack = new Backendhira.BackendhiraStack(app, 'MyTestStack');
    // THEN
    const template = cdk.assertions.Template.fromStack(stack);
    template.resourceCountIs('AWS::Lambda::Function', 1);
});
// Test cases for get function
describe('GET', function () {
    it('Get reqiest recieved and responds with json', function (done) {
        request(app)
            .get('/')
            .send()
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(200, done);
    });
});
// Test cases for post function
describe('POST', function () {
    it('POST reqiest recieved and responds with json', function (done) {
        request(app)
            .post('/')
            .send({ "url": "www.gmail.com" })
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(200, done);
    });
});
// Test case for update function
describe('Update', function () {
    it('Update reqiest recieved and responds with json', function (done) {
        request(app)
            .post('/')
            .send({ "url": "www.gmail.com", "updateurl": "www.dropbox.com" })
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(200, done);
    });
});
// Test case for delete function
describe('Delete', function () {
    it('Delete reqiest recieved and responds with json', function (done) {
        request(app)
            .post('/')
            .send({ "url": "www.youtube.com" })
            .set('Accept', 'application/json')
            .expect('Content-Type', /json/)
            .expect(200, done);
    });
});
// Content-Type: application/json
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZGhpcmEudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJhY2tlbmRoaXJhLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBbUM7QUFFbkMsd0RBQXdEO0FBRXhELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNyQyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUUzQyx5Q0FBeUM7QUFDekMsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7SUFDcEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDMUIsT0FBTztJQUNQLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBVyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNuRSxPQUFPO0lBQ1AsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFELFFBQVEsQ0FBQyxlQUFlLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdkQsQ0FBQyxDQUFDLENBQUM7QUFHSCw4QkFBOEI7QUFDOUIsUUFBUSxDQUFDLEtBQUssRUFBRTtJQUNkLEVBQUUsQ0FBQyw2Q0FBNkMsRUFBRSxVQUFTLElBQUk7UUFDN0QsT0FBTyxDQUFDLEdBQUcsQ0FBQzthQUVMLEdBQUcsQ0FBQyxHQUFHLENBQUM7YUFDUixJQUFJLEVBQUU7YUFDTixHQUFHLENBQUMsUUFBUSxFQUFFLGtCQUFrQixDQUFDO2FBQ2pDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO2FBQzlCLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUdILCtCQUErQjtBQUMvQixRQUFRLENBQUMsTUFBTSxFQUFFO0lBQ2YsRUFBRSxDQUFDLDhDQUE4QyxFQUFFLFVBQVMsSUFBSTtRQUM5RCxPQUFPLENBQUMsR0FBRyxDQUFDO2FBRUwsSUFBSSxDQUFDLEdBQUcsQ0FBQzthQUNULElBQUksQ0FBQyxFQUFDLEtBQUssRUFBQyxlQUFlLEVBQUMsQ0FBQzthQUM3QixHQUFHLENBQUMsUUFBUSxFQUFFLGtCQUFrQixDQUFDO2FBQ2pDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDO2FBQzlCLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFDVCxDQUFDLENBQUMsQ0FBQztBQUdILGdDQUFnQztBQUNoQyxRQUFRLENBQUMsUUFBUSxFQUFFO0lBQ2pCLEVBQUUsQ0FBQyxnREFBZ0QsRUFBRSxVQUFTLElBQUk7UUFDaEUsT0FBTyxDQUFDLEdBQUcsQ0FBQzthQUVMLElBQUksQ0FBQyxHQUFHLENBQUM7YUFDVCxJQUFJLENBQUMsRUFBQyxLQUFLLEVBQUMsZUFBZSxFQUFDLFdBQVcsRUFBQyxpQkFBaUIsRUFBQyxDQUFDO2FBQzNELEdBQUcsQ0FBQyxRQUFRLEVBQUUsa0JBQWtCLENBQUM7YUFDakMsTUFBTSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7YUFDOUIsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBR0gsZ0NBQWdDO0FBQ2hDLFFBQVEsQ0FBQyxRQUFRLEVBQUU7SUFDakIsRUFBRSxDQUFDLGdEQUFnRCxFQUFFLFVBQVMsSUFBSTtRQUNoRSxPQUFPLENBQUMsR0FBRyxDQUFDO2FBRUwsSUFBSSxDQUFDLEdBQUcsQ0FBQzthQUNULElBQUksQ0FBQyxFQUFDLEtBQUssRUFBQyxpQkFBaUIsRUFBQyxDQUFDO2FBQy9CLEdBQUcsQ0FBQyxRQUFRLEVBQUUsa0JBQWtCLENBQUM7YUFDakMsTUFBTSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUM7YUFDOUIsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsaUNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnYXdzLWNkay1saWIvYXNzZXJ0aW9ucyc7XG5pbXBvcnQgKiBhcyBCYWNrZW5kaGlyYSBmcm9tICcuLi9saWIvYmFja2VuZGhpcmEtc3RhY2snO1xuXG5jb25zdCByZXF1ZXN0ID0gcmVxdWlyZSgnc3VwZXJ0ZXN0Jyk7XG5jb25zdCBhcHAgPSByZXF1aXJlKCcuLi9zZXJ2ZXIvc2VydmVyLmpzJyk7XG5cbi8vIFRlc3QgY2FzZSBmb3IgY2hlY2tpbmcgTGFtYmRhIGZ1bmN0aW9uXG50ZXN0KCdBV1MgTGFtYmRhJywgKCkgPT4ge1xuICAgIGNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG4gICAgLy8gV0hFTlxuICAgIGNvbnN0IHN0YWNrID0gbmV3IEJhY2tlbmRoaXJhLkJhY2tlbmRoaXJhU3RhY2soYXBwLCAnTXlUZXN0U3RhY2snKTtcbiAgICAvLyBUSEVOXG4gICAgY29uc3QgdGVtcGxhdGUgPSBjZGsuYXNzZXJ0aW9ucy5UZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spO1xuICAgIHRlbXBsYXRlLnJlc291cmNlQ291bnRJcygnQVdTOjpMYW1iZGE6OkZ1bmN0aW9uJywgMSk7XG4gIH0pO1xuXG4gIFxuICAvLyBUZXN0IGNhc2VzIGZvciBnZXQgZnVuY3Rpb25cbiAgZGVzY3JpYmUoJ0dFVCcsIGZ1bmN0aW9uKCkge1xuICAgIGl0KCdHZXQgcmVxaWVzdCByZWNpZXZlZCBhbmQgcmVzcG9uZHMgd2l0aCBqc29uJywgZnVuY3Rpb24oZG9uZSkge1xuICAgICAgcmVxdWVzdChhcHApXG5cbiAgICAgICAgICAgIC5nZXQoJy8nKVxuICAgICAgICAgICAgLnNlbmQoKVxuICAgICAgICAgICAgLnNldCgnQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKVxuICAgICAgICAgICAgLmV4cGVjdCgnQ29udGVudC1UeXBlJywgL2pzb24vKVxuICAgICAgICAgICAgLmV4cGVjdCgyMDAsIGRvbmUpO1xuICAgIH0pO1xuICB9KTtcblxuXG4gIC8vIFRlc3QgY2FzZXMgZm9yIHBvc3QgZnVuY3Rpb25cbiAgZGVzY3JpYmUoJ1BPU1QnLCBmdW5jdGlvbigpIHtcbiAgICBpdCgnUE9TVCByZXFpZXN0IHJlY2lldmVkIGFuZCByZXNwb25kcyB3aXRoIGpzb24nLCBmdW5jdGlvbihkb25lKSB7XG4gICAgICByZXF1ZXN0KGFwcClcblxuICAgICAgICAgICAgLnBvc3QoJy8nKVxuICAgICAgICAgICAgLnNlbmQoe1widXJsXCI6XCJ3d3cuZ21haWwuY29tXCJ9KVxuICAgICAgICAgICAgLnNldCgnQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKVxuICAgICAgICAgICAgLmV4cGVjdCgnQ29udGVudC1UeXBlJywgL2pzb24vKVxuICAgICAgICAgICAgLmV4cGVjdCgyMDAsIGRvbmUpO1xuICAgICAgICB9KTtcbiAgfSk7XG5cblxuICAvLyBUZXN0IGNhc2UgZm9yIHVwZGF0ZSBmdW5jdGlvblxuICBkZXNjcmliZSgnVXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgaXQoJ1VwZGF0ZSByZXFpZXN0IHJlY2lldmVkIGFuZCByZXNwb25kcyB3aXRoIGpzb24nLCBmdW5jdGlvbihkb25lKSB7XG4gICAgICByZXF1ZXN0KGFwcClcblxuICAgICAgICAgICAgLnBvc3QoJy8nKVxuICAgICAgICAgICAgLnNlbmQoe1widXJsXCI6XCJ3d3cuZ21haWwuY29tXCIsXCJ1cGRhdGV1cmxcIjpcInd3dy5kcm9wYm94LmNvbVwifSlcbiAgICAgICAgICAgIC5zZXQoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJylcbiAgICAgICAgICAgIC5leHBlY3QoJ0NvbnRlbnQtVHlwZScsIC9qc29uLylcbiAgICAgICAgICAgIC5leHBlY3QoMjAwLCBkb25lKTtcbiAgICB9KTtcbiAgfSk7XG5cblxuICAvLyBUZXN0IGNhc2UgZm9yIGRlbGV0ZSBmdW5jdGlvblxuICBkZXNjcmliZSgnRGVsZXRlJywgZnVuY3Rpb24oKSB7XG4gICAgaXQoJ0RlbGV0ZSByZXFpZXN0IHJlY2lldmVkIGFuZCByZXNwb25kcyB3aXRoIGpzb24nLCBmdW5jdGlvbihkb25lKSB7XG4gICAgICByZXF1ZXN0KGFwcClcblxuICAgICAgICAgICAgLnBvc3QoJy8nKVxuICAgICAgICAgICAgLnNlbmQoe1widXJsXCI6XCJ3d3cueW91dHViZS5jb21cIn0pXG4gICAgICAgICAgICAuc2V0KCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpXG4gICAgICAgICAgICAuZXhwZWN0KCdDb250ZW50LVR5cGUnLCAvanNvbi8pXG4gICAgICAgICAgICAuZXhwZWN0KDIwMCwgZG9uZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbiJdfQ==