"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios = require('axios');
const constant = require("./constant.json");
const cloudwatch_1 = require("./cloudwatch");
var AWS = require('aws-sdk');
const { getUrls } = require("./mongourl");
exports.webhandler = async function (event, context) {
    var cw = new AWS.CloudWatch();
    let values;
    // Getting URLs from mongo db
    const resUrl = await getUrls();
    // Iterate each URL
    for (var urls of resUrl) {
        const geturl = "https://" + urls.url + "/";
        console.log(`urls value are = ${urls}`);
        var avail = await get_availability(geturl);
        var latency = await get_latency(geturl);
        //publishing metric of availability and latency
        let cw_avail = cloudwatch_1.publish_metric(constant.url_namespace, constant.Metricname_avail, urls.url, avail);
        let cw_latency = cloudwatch_1.publish_metric(constant.url_namespace, constant.Metricname_latency, urls.url, latency);
        values = {
            "url": urls,
            "availability": avail,
            "latency": latency
        };
        console.log(values);
    }
    return values;
};
// Get Availability
async function get_availability(url) {
    const res = await axios.get(url);
    if (res.status == 200 || res.status == 201) { // If status will return 200 & 201, website is available
        return 1;
    }
    else {
        return 0;
    }
}
// Get Latency
async function get_latency(url) {
    const strt_time = new Date().getTime();
    const res = await axios.get(url);
    const end_time = new Date().getTime();
    const diff = end_time - strt_time;
    const latency = diff / 1000; // Calculating difference between start & end time
    console.log(latency);
    return latency;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViSGVhbHRoTGFtYmRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2ViSGVhbHRoTGFtYmRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBQzVDLDZDQUE0QztBQUM1QyxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDN0IsTUFBTSxFQUFDLE9BQU8sRUFBQyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUV2QyxPQUFPLENBQUMsVUFBVSxHQUFHLEtBQUssV0FBVSxLQUFTLEVBQUMsT0FBVztJQUNyRCxJQUFJLEVBQUUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUM5QixJQUFJLE1BQVUsQ0FBQztJQUVYLDZCQUE2QjtJQUM3QixNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sRUFBRSxDQUFBO0lBRTlCLG1CQUFtQjtJQUNuQixLQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sRUFBRTtRQUNwQixNQUFNLE1BQU0sR0FBRyxVQUFVLEdBQUMsSUFBSSxDQUFDLEdBQUcsR0FBQyxHQUFHLENBQUM7UUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUN4QyxJQUFJLEtBQUssR0FBRyxNQUFNLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNDLElBQUksT0FBTyxHQUFHLE1BQU0sV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXhDLCtDQUErQztRQUMvQyxJQUFJLFFBQVEsR0FBQywyQkFBYyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUMsUUFBUSxDQUFDLGdCQUFnQixFQUFDLElBQUksQ0FBQyxHQUFHLEVBQUMsS0FBSyxDQUFDLENBQUE7UUFDNUYsSUFBSSxVQUFVLEdBQUMsMkJBQWMsQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFDLFFBQVEsQ0FBQyxrQkFBa0IsRUFBQyxJQUFJLENBQUMsR0FBRyxFQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRTdGLE1BQU0sR0FBQztZQUNQLEtBQUssRUFBQyxJQUFJO1lBQ1YsY0FBYyxFQUFDLEtBQUs7WUFDcEIsU0FBUyxFQUFDLE9BQU87U0FBQyxDQUFDO1FBRW5CLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDekI7SUFFRCxPQUFPLE1BQU0sQ0FBQTtBQUNyQixDQUFDLENBQUM7QUFJSixtQkFBbUI7QUFDbkIsS0FBSyxVQUFVLGdCQUFnQixDQUFDLEdBQVU7SUFFdEMsTUFBTSxHQUFHLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBRSxHQUFHLEVBQUMsRUFBRSx3REFBd0Q7UUFDN0YsT0FBTyxDQUFDLENBQUE7S0FDWDtTQUNHO1FBQ0EsT0FBTyxDQUFDLENBQUE7S0FDWDtBQUNMLENBQUM7QUFFRCxjQUFjO0FBQ2QsS0FBSyxVQUFVLFdBQVcsQ0FBQyxHQUFVO0lBQ2pDLE1BQU0sU0FBUyxHQUFDLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDckMsTUFBTSxHQUFHLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLE1BQU0sUUFBUSxHQUFDLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDcEMsTUFBTSxJQUFJLEdBQUcsUUFBUSxHQUFDLFNBQVMsQ0FBQTtJQUMvQixNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsa0RBQWtEO0lBQy9FLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDcEIsT0FBTyxPQUFPLENBQUE7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcclxuY29uc3QgY29uc3RhbnQgPSByZXF1aXJlKFwiLi9jb25zdGFudC5qc29uXCIpO1xyXG5pbXBvcnQge3B1Ymxpc2hfbWV0cmljfSBmcm9tICcuL2Nsb3Vkd2F0Y2gnO1xyXG52YXIgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpO1xyXG5jb25zdCB7Z2V0VXJsc30gPSByZXF1aXJlKFwiLi9tb25nb3VybFwiKVxyXG5cclxuZXhwb3J0cy53ZWJoYW5kbGVyID0gYXN5bmMgZnVuY3Rpb24oZXZlbnQ6YW55LGNvbnRleHQ6YW55KSB7XHJcbiAgICB2YXIgY3cgPSBuZXcgQVdTLkNsb3VkV2F0Y2goKTtcclxuICAgIGxldCB2YWx1ZXM6YW55O1xyXG5cclxuICAgICAgICAvLyBHZXR0aW5nIFVSTHMgZnJvbSBtb25nbyBkYlxyXG4gICAgICAgIGNvbnN0IHJlc1VybCA9IGF3YWl0IGdldFVybHMoKVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEl0ZXJhdGUgZWFjaCBVUkxcclxuICAgICAgICBmb3IodmFyIHVybHMgb2YgcmVzVXJsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGdldHVybCA9IFwiaHR0cHM6Ly9cIit1cmxzLnVybCtcIi9cIjsgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGB1cmxzIHZhbHVlIGFyZSA9ICR7dXJsc31gKVxyXG4gICAgICAgICAgIHZhciBhdmFpbCA9IGF3YWl0IGdldF9hdmFpbGFiaWxpdHkoZ2V0dXJsKTtcclxuICAgICAgICAgICB2YXIgbGF0ZW5jeSA9IGF3YWl0IGdldF9sYXRlbmN5KGdldHVybCk7XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgLy9wdWJsaXNoaW5nIG1ldHJpYyBvZiBhdmFpbGFiaWxpdHkgYW5kIGxhdGVuY3lcclxuICAgICAgICAgICBsZXQgY3dfYXZhaWw9cHVibGlzaF9tZXRyaWMoY29uc3RhbnQudXJsX25hbWVzcGFjZSxjb25zdGFudC5NZXRyaWNuYW1lX2F2YWlsLHVybHMudXJsLGF2YWlsKVxyXG4gICAgICAgICAgIGxldCBjd19sYXRlbmN5PXB1Ymxpc2hfbWV0cmljKGNvbnN0YW50LnVybF9uYW1lc3BhY2UsY29uc3RhbnQuTWV0cmljbmFtZV9sYXRlbmN5LHVybHMudXJsLGxhdGVuY3kpXHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB2YWx1ZXM9e1xyXG4gICAgICAgICAgICAgICAgXCJ1cmxcIjp1cmxzLFxyXG4gICAgICAgICAgICAgICAgXCJhdmFpbGFiaWxpdHlcIjphdmFpbCxcclxuICAgICAgICAgICAgICAgIFwibGF0ZW5jeVwiOmxhdGVuY3l9O1xyXG4gICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHZhbHVlcyk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuIHZhbHVlc1xyXG4gIH07XHJcblxyXG5cclxuXHJcbi8vIEdldCBBdmFpbGFiaWxpdHlcclxuYXN5bmMgZnVuY3Rpb24gZ2V0X2F2YWlsYWJpbGl0eSh1cmw6c3RyaW5nKXtcclxuXHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5nZXQodXJsKTtcclxuICAgIGlmIChyZXMuc3RhdHVzPT0yMDAgfHwgcmVzLnN0YXR1cz09MjAxKXsgLy8gSWYgc3RhdHVzIHdpbGwgcmV0dXJuIDIwMCAmIDIwMSwgd2Vic2l0ZSBpcyBhdmFpbGFibGVcclxuICAgICAgICByZXR1cm4gMVxyXG4gICAgfVxyXG4gICAgZWxzZXtcclxuICAgICAgICByZXR1cm4gMFxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBHZXQgTGF0ZW5jeVxyXG5hc3luYyBmdW5jdGlvbiBnZXRfbGF0ZW5jeSh1cmw6c3RyaW5nKXtcclxuICAgIGNvbnN0IHN0cnRfdGltZT1uZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCh1cmwpO1xyXG4gICAgY29uc3QgZW5kX3RpbWU9bmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICBjb25zdCBkaWZmID0gZW5kX3RpbWUtc3RydF90aW1lXHJcbiAgICBjb25zdCBsYXRlbmN5ID0gZGlmZiAvIDEwMDA7IC8vIENhbGN1bGF0aW5nIGRpZmZlcmVuY2UgYmV0d2VlbiBzdGFydCAmIGVuZCB0aW1lXHJcbiAgICBjb25zb2xlLmxvZyhsYXRlbmN5KVxyXG4gICAgcmV0dXJuIGxhdGVuY3lcclxufSJdfQ==